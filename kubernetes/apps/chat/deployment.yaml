apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-service
spec:
  #replicas: 1
  selector:
    matchLabels:
      app: chat-service
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      name: chat-service
      labels:
        app: chat-service
    spec:
      containers:
      - name: chat-service
        image: wm3/chat-service
        imagePullPolicy: IfNotPresent #TODO: Always
        ports:
          - containerPort: 8080
        envFrom:
          - configMapRef:
              name: config
        env:
          - name: "FOUNDATION_DATABASE_URL"
            #value: jdbc:datadirect:openedge://openedge-service:24641;databaseName=ems2web; autoReconnect=true;user=sysprogress;password=sysprogress
            value: jdbc:datadirect:openedge://external-db:24641;databaseName=ems2web; autoReconnect=true;user=sysprogress;password=sysprogress
          - name: "MONGODB_APP_URI"
            value: "mongodb://admin:red321Company@mongo:27017/auth?authSource=admin&readPreference=primary"
          - name: PUSH_NOTIFICATION_URL
            value: notification-service
          - name: SOCKET_URL
            value: socket-service
        #livenessProbe: #verificar o health do container
        #  httpGet:
        #    path: /actuator/health # ver qual caminha para verificar se esta saudavel
        #    port: 8080
        #  initialDelaySeconds: 300
        #  periodSeconds: 30
        #  timeoutSeconds: 60
        #  failureThreshold: 8
        #readinessProbe: #a aplicação estará pronta para receber requisição a partir do momento que receber sucesso no get do path
        #  httpGet:
        #    path: /actuator/health
        #    port: 8080
        #  initialDelaySeconds: 240
        #  periodSeconds: 60
        #  timeoutSeconds: 60
        #  failureThreshold: 9
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 50m
            memory: 50Mi
---
#versions: https://github.com/kubernetes-sigs/metrics-server/
#kubectl apply -f components.yaml
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: chat-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: chat-service
  minReplicas: 1
  maxReplicas: 1
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 180
