apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: my-auth-token-transformer
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_FIRST
      value:
        name: my.filters.auth.token_transformer
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          idle_timeout: 24h
          inlineCode: |
            function stringSplit(inputstr, sep)
              if sep == nil then
                sep = "%s"
              end
              local t={}
              for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                table.insert(t, str)
              end
              return t
            end

            function string.starts(String, Start)
              return string.sub(String, 1, string.len(Start)) == Start
            end
            
            function envoy_on_request(request_handle)
              request_handle:logDebug("Hello World")
              headers = request_handle:headers()

              path = headers:get(":path")
              if path == "/health" or path == "/metrics" or path == "/auth/oauth/token" or string.starts(path, "/storage/files/pub/") then
                headers:remove("Authorization")
                return
              end

              cookieString = headers:get("cookie")
              if cookieString ~= nil and headers:get("Authorization") == nil then
                splitCookieString = stringSplit(cookieString, ";")
                
                jwt = nil
                for i, cookieItem in ipairs(splitCookieString) do
                  if string.find(cookieItem, "accessToken") ~= nil then
                    jwt = string.gsub(cookieItem, "accessToken=", "")
                  end
                end

                if jwt ~= nil then
                  token = string.gsub(jwt, "^ ", "")
                  headers:replace("Authorization", "Bearer "..token)
                end
              end
            end
            function envoy_on_response(response_handle)
              headers = response_handle:headers()

              headers:add("my_Filter", "ENVOY funcionou bem")
              if not headers:get("X-Frame-Options") then
                headers:add("X-Frame-Options", "SAMEORIGIN");
              end
              headers:replace("X-Frame-Options", "SAMEORIGIN");
            end